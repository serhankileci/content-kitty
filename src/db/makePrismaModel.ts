import { toPascalCase, Database, Options } from "../util";

const makePrismaModel = async (collections: Options["content"]["collections"], db: Database) => {
	const dataSource = `// Generated by SystemPanda, do NOT modify,\n// configure your SystemPanda collections object instead.\n\ndatasource db {\n\tprovider = "${
		db.URI?.split(":")[0]
	}"\n\turl = env("DATABASE_URL")\n}\n\ngenerator client {\n\tprovider = "prisma-client-js"\n}\n\n`;

	return (
		dataSource +
		Object.keys(collections)
			.map(collection => {
				const { fields, access, hooks, slug, webhooks } = collections[collection];

				const mapping = {
					text: "String",
					checkbox: "Boolean",
					number: {
						kind: ["Int", "BigInt", "Float", "Decimal"],
					},
					datetime: "DateTime",
					boolean: "Boolean",
				};
				const lines = [
					`model ${toPascalCase(collection)} {`,
					`    ${fields.id?.name || "id"} Int @id @default(${
						fields.id?.type ? fields.id.type + "()" : "autoincrement()"
					})`,
				];

				for (const field in fields) {
					const { defaultValue, required, type, unique, index } = fields[field];

					const requiredTypeOrNot = required ? mapping[type] : `${mapping[type]}?`;
					const parts = ["\t" + field.replace(/\s/g, "_"), requiredTypeOrNot];

					if (unique) parts.push("@unique");
					if (defaultValue) parts.push(`@default(${JSON.stringify(defaultValue)})`);

					lines.push(parts.join(" "));
				}

				for (const field in fields) {
					const { index } = fields[field];
					const parts = [];

					if (index) parts.push(`@@index([${field}])`);

					if (parts.length > 0) {
						lines.push(parts.join(" "));
					}
				}

				lines.push("}");

				return lines.join("\n") + "\n";
			})
			.join("\n")
	);
};

export { makePrismaModel };
